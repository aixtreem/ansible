---
# **********************************************************
# Playbook‚ÄØ: Passer l‚ÄôIP de statique √† DHCP (Debian/Ubuntu)
# D√©tecte automatiquement la m√©thode r√©seau (ifupdown, netplan, NetworkManager)
# Applique la conversion adapt√©e, sauvegarde, red√©marre le service, affiche le r√©sultat
# Se connecte avec le compte ansible (doit avoir les droits sudo)
# **********************************************************

  - name: Passer l‚ÄôIP de statique √† DHCP (d√©tection automatique)
    hosts: esphome
    remote_user: ansible         # Utilisateur de connexion SSH (ajuster si besoin)
    gather_facts: false          # Pas besoin de collecter les facts r√©seaux ici

    vars:
      interface_cible: eth0      # üîß Nom de l‚Äôinterface √† configurer (v√©rifier avec ip a)
      netplan_file: /etc/netplan/00-installer-config.yaml   # üîß Fichier netplan par d√©faut
      nm_conn: "Wired connection 1"  # üîß Nom de connexion NetworkManager (voir nmcli c)

  tasks:

    # -------------------------------------------------------
    # 1. D√©tection automatique du type de gestion r√©seau
    # -------------------------------------------------------
    # On v√©rifie quelle m√©thode est utilis√©e sur le syst√®me cible‚ÄØ:
    # - ifupdown (/etc/network/interfaces + networking.service)
    # - netplan (/etc/netplan/*.yaml + netplan apply)
    # - NetworkManager (/etc/NetworkManager/system-connections/)

    - name: V√©rifier si ifupdown est utilis√© (interfaces)
      ansible.builtin.stat:
        path: /etc/network/interfaces
      register: interfaces_stat

    - name: V√©rifier si netplan est utilis√© (netplan)
      ansible.builtin.stat:
        path: "{{ netplan_file }}"
      register: netplan_stat

    - name: V√©rifier si NetworkManager est utilis√© (system-connections)
      ansible.builtin.stat:
        path: "/etc/NetworkManager/system-connections/{{ nm_conn }}"
      register: networkmanager_stat

    - name: D√©terminer la m√©thode active
      ansible.builtin.set_fact:
        network_type: >-
          {% if netplan_stat.stat.exists %}
            netplan
          {% elif networkmanager_stat.stat.exists %}
            networkmanager
          {% elif interfaces_stat.stat.exists %}
            interfaces
          {% else %}
            unknown
          {% endif %}

    - name: Afficher la m√©thode d√©tect√©e
      ansible.builtin.debug:
        msg: "M√©thode de gestion r√©seau d√©tect√©e‚ÄØ: {{ network_type }}"


    # -------------------------------------------------------
    # 2. Sauvegarde de la configuration actuelle
    # -------------------------------------------------------
    - name: Sauvegarder la configuration actuelle (interfaces)
      ansible.builtin.copy:
        src: /etc/network/interfaces
        dest: /etc/network/interfaces.bak
        remote_src: true
      become: true
      when: network_type == "interfaces"

    - name: Sauvegarder la configuration actuelle (netplan)
      ansible.builtin.copy:
        src: "{{ netplan_file }}"
        dest: "{{ netplan_file }}.bak"
        remote_src: true
      become: true
      when: network_type == "netplan"

    - name: Sauvegarder la configuration actuelle (NetworkManager)
      ansible.builtin.copy:
        src: "/etc/NetworkManager/system-connections/{{ nm_conn }}"
        dest: "/etc/NetworkManager/system-connections/{{ nm_conn }}.bak"
        remote_src: true
      become: true
      when: network_type == "networkmanager"


    # -------------------------------------------------------
    # 3. Conversion vers DHCP selon la m√©thode d√©tect√©e
    # -------------------------------------------------------

    # --- M√©thode ifupdown (interfaces)
    - name: Supprimer les param√®tres statiques de l‚Äôinterface (interfaces)
      ansible.builtin.replace:
        path: /etc/network/interfaces
        regexp: '^(\s+)?(address|gateway|netmask|dns-nameservers|dns-search)\s+'
        state: absent
        after: '^iface {{ interface_cible }} inet static'
        before: '^(\s*)(iface|auto|allow-hotplug|source|mapping)\b'
      become: true
      when: network_type == "interfaces"
      notify: restart_networking

    - name: Passer l‚Äôinterface en DHCP (interfaces)
      ansible.builtin.replace:
        path: /etc/network/interfaces
        regexp: '^iface {{ interface_cible }} inet static'
        replace: 'iface {{ interface_cible }} inet dhcp'
      become: true
      when: network_type == "interfaces"
      notify: restart_networking

    # --- M√©thode netplan
    - name: Passer l‚Äôinterface en DHCP (netplan)
      ansible.builtin.blockinfile:
        path: "{{ netplan_file }}"
        marker: "# {mark} ANSIBLE MANAGED BLOCK: Set interface DHCP"
        block: |
          network:
            version: 2
            renderer: networkd
            ethernets:
              {{ interface_cible }}:
                dhcp4: true
                dhcp6: true
        insertafter: EOF
      become: true
      when: network_type == "netplan"
      notify: apply_netplan

    # --- M√©thode NetworkManager
    - name: Passer l‚Äôinterface en DHCP (NetworkManager)
      ansible.builtin.shell: |
        nmcli connection modify "{{ nm_conn }}" ipv4.method auto
        nmcli connection up "{{ nm_conn }}"
      become: true
      when: network_type == "networkmanager"

    # --- Si aucune m√©thode connue n‚Äôest d√©tect√©e
    - name: √âchec si aucune m√©thode connue n‚Äôest d√©tect√©e
      ansible.builtin.fail:
        msg: "Aucune m√©thode de gestion r√©seau connue (ifupdown, netplan, NetworkManager) n‚Äôa √©t√© d√©tect√©e."
      when: network_type == "unknown"


# -------------------------------------------------------
# HANDLERS (notifiers)
# -------------------------------------------------------
handlers:
  - name: restart_networking        # Red√©marrer le service networking (si ifupdown)
    ansible.builtin.service:
      name: networking
      state: restarted
    become: true

  - name: apply_netplan             # Appliquer la configuration netplan (si netplan)
    ansible.builtin.command:
      cmd: netplan apply
    become: true


    # -------------------------------------------------------
    # 5. Affichage du r√©sultat
    # -------------------------------------------------------
    - name: Afficher la configuration finale (interfaces)
      ansible.builtin.command: cat /etc/network/interfaces
      register: interfaces_content
      changed_when: false
      when: network_type == "interfaces"

    - name: Afficher la configuration finale (netplan)
      ansible.builtin.command: cat "{{ netplan_file }}"
      register: netplan_content
      changed_when: false
      when: network_type == "netplan"

    - name: Afficher la configuration finale (NetworkManager)
      ansible.builtin.shell: nmcli connection show "{{ nm_conn }}" | grep -A10 "ipv4.method"
      register: networkmanager_content
      changed_when: false
      when: network_type == "networkmanager"

    - name: R√©sum√© final
      ansible.builtin.debug:
        msg: |
          M√©thode r√©seau‚ÄØ: {{ network_type }}
          Interface cible‚ÄØ: {{ interface_cible }}
          {% if network_type == "interfaces" %}
          Fichier interfaces modifi√©‚ÄØ: {{ interfaces_content.stdout }}
          {% elif network_type == "netplan" %}
          Fichier netplan modifi√©‚ÄØ: {{ netplan_content.stdout }}
          {% elif network_type == "networkmanager" %}
          Statut NetworkManager‚ÄØ: {{ networkmanager_content.stdout }}
          {% endif %}
