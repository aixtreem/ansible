---
# **********************************************************
# Passer l‚ÄôIP de statique √† DHCP (Debian/Ubuntu)
# Version adapt√©e pour se connecter avec le compte `ansible`
# ATTENTION‚ÄØ: Le compte `ansible` doit exister sur la cible et avoir les droits n√©cessaires‚ÄØ!
# **********************************************************

- name: Passer l‚ÄôIP de statique √† DHCP (Debian/Ubuntu)
  hosts: esphome            # Cible d√©finie dans l‚Äôinventaire
  remote_user: ansible      # Se connecte avec l‚Äôutilisateur `ansible`
  gather_facts: false       # Pas besoin de collecter les facts ici

  vars:
    # √Ä adapter selon ton environnement
    interface_cible: eth0                # üîß Nom de l‚Äôinterface √† configurer (v√©rifie avec `ip a`)
    netplan_file: /etc/netplan/00-installer-config.yaml  # üîß Chemin du fichier netplan principal
    nm_conn: "Wired connection 1"        # üîß Nom de la connexion NetworkManager (voir `nmcli c`)

  tasks:
    ##############################################################
    ##         V√©rification des droits sudo du compte ansible    ##
    ##                                                          ##
    ## (Optionnel mais recommand√© en production)                ##
    ## On v√©rifie que l‚Äôutilisateur ansible peut utiliser sudo  ##
    ##############################################################

    - name: V√©rifier les droits sudo du compte ansible
      ansible.builtin.command: sudo -l
      register: sudo_check
      changed_when: false
      ignore_errors: yes

    - name: Fail si ansible n‚Äôa pas les droits n√©cessaires
      ansible.builtin.fail:
        msg: "Le compte 'ansible' doit avoir les droits sudo (passwordless ou non) pour poursuivre."
      when: sudo_check.rc != 0


    ##############################################################
    ##         D√©tection de la m√©thode de gestion r√©seau        ##
    ##                                                          ##
    ## V√©rifie quelle m√©thode est utilis√©e sur l‚Äôh√¥te‚ÄØ:         ##
    ## - netplan (standard sur Ubuntu/Debian r√©cent)            ##
    ## - interfaces (ancien style, fichier /etc/network/interfaces)
    ## - NetworkManager (souvent sur desktop ou cloud)          ##
    ##############################################################

    - name: V√©rifier si netplan est utilis√©
      ansible.builtin.stat:
        path: "{{ netplan_file }}"
      register: netplan_stat

    - name: V√©rifier si interfaces est utilis√©
      ansible.builtin.stat:
        path: /etc/network/interfaces
      register: interfaces_stat

    - name: V√©rifier si NetworkManager est utilis√©
      ansible.builtin.stat:
        path: "/etc/NetworkManager/system-connections/{{ nm_conn }}"
      register: networkmanager_stat

    - name: D√©terminer la m√©thode de gestion r√©seau
      ansible.builtin.set_fact:
        network_type: >-
          {% if netplan_stat.stat.exists %}
            netplan
          {% elif interfaces_stat.stat.exists %}
            interfaces
          {% elif networkmanager_stat.stat.exists %}
            networkmanager
          {% else %}
            unknown
          {% endif %}

    - name: Afficher la m√©thode d√©tect√©e
      ansible.builtin.debug:
        msg: "M√©thode de gestion r√©seau d√©tect√©e‚ÄØ: {{ network_type }}"


    ##############################################################
    ##         Sauvegarde de la configuration actuelle          ##
    ##                                                          ##
    ## Avant toute modification, sauvegarde la configuration    ##
    ## actuelle pour pouvoir revenir en arri√®re en cas de souci ##
    ##############################################################

    - name: Sauvegarder la configuration netplan
      ansible.builtin.copy:
        src: "{{ netplan_file }}"
        dest: "{{ netplan_file }}.bak"
        remote_src: true
      become: true      # Escalade en root (acc√®s sudo obligatoire)
      when: netplan_stat.stat.exists

    - name: Sauvegarder la configuration interfaces
      ansible.builtin.copy:
        src: /etc/network/interfaces
        dest: /etc/network/interfaces.bak
        remote_src: true
      become: true      # Escalade en root (acc√®s sudo obligatoire)
      when: interfaces_stat.stat.exists

    - name: Sauvegarder la configuration NetworkManager
      ansible.builtin.copy:
        src: "/etc/NetworkManager/system-connections/{{ nm_conn }}"
        dest: "/etc/NetworkManager/system-connections/{{ nm_conn }}.bak"
        remote_src: true
      become: true      # Escalade en root (acc√®s sudo obligatoire)
      when: networkmanager_stat.stat.exists


    ##############################################################
    ##         Conversion vers DHCP selon la m√©thode            ##
    ##############################################################

    # --- Pour netplan
    - name: Passer en DHCP avec netplan
      ansible.builtin.blockinfile:
        path: "{{ netplan_file }}"
        backup: yes
        marker: "# {mark} ANSIBLE MANAGED BLOCK: Set interface DHCP"
        block: |
          network:
            version: 2
            renderer: networkd
            ethernets:
              {{ interface_cible }}:
                dhcp4: true
                dhcp6: true
        insertafter: EOF
      become: true      # Escalade en root (acc√®s sudo obligatoire)
      when: network_type == "netplan"

    # --- Pour interfaces style Debian ancien
    # On supprime d‚Äôabord les lignes de configuration statique (address, gateway, etc.)
    # puis on remplace la ligne iface ... static par iface ... dhcp
    - name: Supprimer les param√®tres statiques pour {{ interface_cible }}
      ansible.builtin.lineinfile:
        path: /etc/network/interfaces
        regexp: '^(address|gateway|netmask|dns-nameservers|dns-search)\b'
        state: absent
        # On ne supprime que les lignes sous "iface {{ interface_cible }} inet static"
        insertafter: '^iface {{ interface_cible }} inet static'
      become: true      # Escalade en root (acc√®s sudo obligatoire)
      when: network_type == "interfaces"

    - name: Passer en DHCP avec interfaces
      ansible.builtin.lineinfile:
        path: /etc/network/interfaces
        regexp: '^iface {{ interface_cible }} inet static'
        line: 'iface {{ interface_cible }} inet dhcp'
      become: true      # Escalade en root (acc√®s sudo obligatoire)
      when: network_type == "interfaces"

    # --- Pour NetworkManager
    - name: Passer en DHCP avec NetworkManager
      ansible.builtin.shell: |
        nmcli connection modify "{{ nm_conn }}" ipv4.method auto
        nmcli connection up "{{ nm_conn }}"
      become: true      # Escalade en root (acc√®s sudo obligatoire)
      when: network_type == "networkmanager"


    ##############################################################
    ##         Gestion des erreurs et confirmation              ##
    ##############################################################

    - name: √âchec si aucune m√©thode connue n‚Äôest d√©tect√©e
      ansible.builtin.fail:
        msg: "Aucune m√©thode de gestion r√©seau connue (netplan, interfaces, NetworkManager) n‚Äôa √©t√© d√©tect√©e."
      when: network_type == "unknown"


    ##############################################################
    ##         Application de la nouvelle configuration         ##
    ##############################################################

    - name: Appliquer la configuration netplan (netplan apply)
      ansible.builtin.command: netplan apply
      become: true      # Escalade en root (acc√®s sudo obligatoire)
      when: network_type == "netplan"

    - name: Red√©marrer le service networking (interfaces)
      ansible.builtin.service:
        name: networking
        state: restarted
      become: true      # Escalade en root (acc√®s sudo obligatoire)
      when: network_type == "interfaces"


    ##############################################################
    ##         R√©capitulatif final                              ##
    ##############################################################

    - name: Message de confirmation
      ansible.builtin.debug:
        msg: "La configuration r√©seau a √©t√© modifi√©e pour passer de statique √† DHCP sur {{ interface_cible }} (m√©thode‚ÄØ: {{ network_type }})."

    # ‚ö†Ô∏è √Ä la fin‚ÄØ: v√©rifie que la connexion fonctionne toujours avant de te d√©connecter‚ÄØ!
    # Si tu utilises SSH pour administrer, pr√©vois un acc√®s de secours (console, KVM, etc.).
