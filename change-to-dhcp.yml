---
# **********************************************************
# Playbook‚ÄØ: Passer l‚ÄôIP de statique √† DHCP (Debian/Ubuntu)
# D√©tecte automatiquement la m√©thode r√©seau (ifupdown, netplan, NetworkManager)
# Applique la conversion adapt√©e, sauvegarde, red√©marre le service, affiche le r√©sultat
# Se connecte avec le compte ansible (doit avoir les droits sudo)
# **********************************************************

- name: Passer l‚ÄôIP de statique √† DHCP (d√©tection automatique)
  hosts: esphome
  remote_user: ansible         # Utilisateur de connexion SSH (ajuster si besoin)
  gather_facts: false          # Pas besoin de collecter les facts r√©seaux ici

  vars:
    interface_cible: eth0      # üîß Nom de l‚Äôinterface √† configurer (v√©rifier avec ip a)
    netplan_file: /etc/netplan/00-installer-config.yaml   # üîß Fichier netplan par d√©faut
    nm_conn: "Wired connection 1"  # üîß Nom de connexion NetworkManager (voir nmcli c)

  tasks:

    # -------------------------------------------------------
    # 1. D√©tection automatique du type de gestion r√©seau
    # -------------------------------------------------------
    # On v√©rifie quelle m√©thode est utilis√©e sur le syst√®me cible‚ÄØ:
    # - ifupdown (/etc/network/interfaces + networking.service)
    # - netplan (/etc/netplan/*.yaml + netplan apply)
    # - NetworkManager (/etc/NetworkManager/system-connections/)

    - name: V√©rifier si ifupdown est utilis√© (interfaces)
      ansible.builtin.stat:
        path: /etc/network/interfaces
      register: interfaces_stat

    - name: V√©rifier si netplan est utilis√© (netplan)
      ansible.builtin.stat:
        path: "{{ netplan_file }}"
      register: netplan_stat

    - name: V√©rifier si NetworkManager est utilis√© (system-connections)
      ansible.builtin.stat:
        path: "/etc/NetworkManager/system-connections/{{ nm_conn }}"
      register: networkmanager_stat

    - name: D√©terminer la m√©thode active
      ansible.builtin.set_fact:
        network_type: >-
          {% if netplan_stat.stat.exists %}
            netplan
          {% elif networkmanager_stat.stat.exists %}
            networkmanager
          {% elif interfaces_stat.stat.exists %}
            interfaces
          {% else %}
            unknown
          {% endif %}

    - name: Afficher la m√©thode d√©tect√©e
      ansible.builtin.debug:
        msg: "M√©thode de gestion r√©seau d√©tect√©e‚ÄØ: {{ network_type }}"


    # -------------------------------------------------------
    # 2. Sauvegarde de la configuration actuelle
    # -------------------------------------------------------
    - name: Sauvegarder la configuration actuelle (interfaces)
      ansible.builtin.copy:
        src: /etc/network/interfaces
        dest: /etc/network/interfaces.bak
        remote_src: true
      become: true
      when: network_type == "interfaces"

    - name: Sauvegarder la configuration actuelle (netplan)
      ansible.builtin.copy:
        src: "{{ netplan_file }}"
        dest: "{{ netplan_file }}.bak"
        remote_src: true
      become: true
      when: network_type == "netplan"

    - name: Sauvegarder la configuration actuelle (NetworkManager
